---
title: "Bayesian Workflow"
author: "Prof. Sam Berchuck"
date: "2025-02-04"
date-format: "MMM DD, YYYY"
footer: "[ðŸ”— BIOSTAT 725 - Spring 2025](https://biostat725-sp25.netlify.app/)"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: false
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    html-math-method: mathjax
filters:
  - parse-latex
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:      
    width: 200
bibliography: references.bib
---

```{r, echo=FALSE}
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(knitr)
library(mvtnorm)
library(coda)
```

## Review of last lecture

On Thursday, we learned about various ways compare models.

-   AIC, DIC, WAIC

-   LOO-CV/LOO-IC

Today, we will put these concepts within the larger framework of the Bayesian workflow.

## Bayes theorem

$$f(\boldsymbol{\theta} | \mathbf{Y}) = \frac{f(\mathbf{Y} | \boldsymbol{\theta})f(\boldsymbol{\theta})}{f(\mathbf{Y})}$$

. . .


- Rethinking Bayes theorem:

$$f(\boldsymbol{\theta} | \mathbf{Y}) \propto f(\mathbf{Y}, \boldsymbol{\theta}) = f(\mathbf{Y} | \boldsymbol{\theta})f(\boldsymbol{\theta}) $$

. . .

- In Stan:

$$\log f(\mathbf{Y} | \boldsymbol{\theta}) + \log f(\boldsymbol{\theta})$$

<!-- ## Bayesian statistics -->

<!-- Advantages: -->

<!-- - Natural approach to expressing uncertainty -->

<!-- - Ability to incorporate prior information -->

<!-- - Increased modeling flexibility -->

<!-- - Full posterior distribution of parameters -->

<!-- - Natural propagation of uncertainty -->

<!-- Disadvantages: -->

<!-- - Slow speed of model estimation -->

## Bayesian workflow {.smaller}

![](images/07/workflow.png){fig-alt="workflow" fig-align="center" height="5in"}

[Gelman A., Vehtari A., Simpson D., Margossian, C., Carpenter, B. and Yao, Y., Kennedy, L., Gabry, J., BÃ¼rkner P. C., & ModrÃ¡k M. (2020). Bayesian Workflow.](https://arxiv.org/abs/2011.01808)

## Bayesian workflow

![[Taken from Bayesian workflow by Francesca Capel](https://francescacapel.com/BayesianWorkflow/index.html)](images/07/workflow0.png){fig-alt="workflow0" fig-align="center" height="4in"}

- Today we will talk about a general strategy for taking a question and data to a robust conclusion.

## A simplified workflow {.midi}

1. *Setting up a full probability model:* a joint probability distribution for all observable and unobservable quantities in a problem. The model should be consistent with knowledge about the underlying scientific problem and the data collection process.

2. *Conditioning on observed data:* calculating and interpreting the appropriate posterior distribution â€” the conditional probability distribution of the unobserved quantities of ultimate interest, given the observed data.

3. *Evaluating the fit of the model and the implications of the resulting posterior distribution:* how well does the model fit the data, are the substantive conclusions reasonable, and how sensitive are the results to the modeling assumptions in step 1? In response, one can alter or expand the model and repeat the three steps.

- From BDA3.

## Bayesian workflow

1. **Research question:** What are your dependent and indepednent variables? What associations are you interested in? EDA.

. . .

2. **Specify likelihood & priors:** Use knowledge of the problem to construct a generative model.

. . .

3. **Check the model with simulated data:** Generate data from the model and evaluate fit as a sanity check (prior predictive checks).

. . .

4. **Fit the model to real data:** Estimate parameters using MCMC.

## Bayesian workflow

5. **Check diagnostics:** Use MCMC diagnostics to guarentee that the algorithm converged.

. . .

6. **Examine posterior fit:** Create posterior summaries that are relevant to the research question. 

. . .

7. **Check predictions:** Examing posterior predictive checks.

. . .

8. **Compare models:** Iterate on model design and choose a model.

## Motivating example: predicting weight from height {.midi}

**Research question:** We would like to understand the relationship between a person's height and weight. A few particular questions we have are:

  1. How much does a person's weight increase when their height increases? 
  
  2. How certain we can be about the magnitude of the increase?
  
  3. Can we predict a personâ€™s weight based on their height?

**Data:** We will use the `bdims` dataset from the `openintro` package. This dataset contains body girth measurements and skeletal diameter measurements, as well as age, weight, height and gender.

## Prepare data

```{r}
library(openintro)
dat <- data.frame(weight = bdims$wgt * 2.20462, # convert weight to lbs
                  height = bdims$hgt * 0.393701, # convert height to inches
                  sex = ifelse(bdims$sex == 1, "Male", "Female"))
head(dat)
```

## 1. **Research question:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 4
#| fig-height: 4
#| layout-ncol: 2
dat |> ggplot(aes(weight)) + 
  geom_histogram() + 
  labs(x = "Weight (pounds)", y = "Count")
dat |> ggplot(aes(height)) + 
  geom_histogram() + 
  labs(x = "Height (inches)", y = "Count")
```

## 1. **Research question:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 5
#| fig-height: 4
#| layout-ncol: 2
dat |> ggplot(aes(x = weight, fill = sex)) + 
  geom_histogram() + 
  labs(x = "Weight (pounds)", y = "Count")
dat |> ggplot(aes(x = height, fill = sex)) + 
  geom_histogram() + 
  labs(x = "Height (inches)", y = "Count")
```

## 1. **Research question:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 5
#| fig-height: 4
#| layout-ncol: 1
dat |> ggplot(aes(y = weight, x = height, col = sex)) + 
  geom_point() + 
  labs(x = "Height (inches)", y = "Weight (pounds)", y = "Count")
```

## 2. **Specify likelihood & priors:**

- Construct a data generating process. 

- We would like to model weight as a function of height using a linear regression model.

$$weight_i = \alpha + \beta \times height_i + \epsilon_i,\quad \epsilon_i \sim N(0,\sigma^2)$$

```{stan output.var = "workflow", eval = FALSE}
data {
  int<lower = 1> n;
  vector[n] height;
  vector[n] weight;
}
```

## 2. **Specify likelihood & priors:**

- Construct a data generating process. 

- We would like to model weight as a function of height using a linear regression model.

$$weight_i = \alpha + \beta \times height_i + \epsilon_i,\quad \epsilon_i \sim N(0,\sigma^2)$$

```{stan output.var = "workflow", eval = FALSE}
parameter {
  real alpha;
  real beta;
  real<lower = 0> sigma;
}
```

## 2. **Specify likelihood & priors:**

- Construct a data generating process. 

- We would like to model weight as a function of height using a linear regression model.

$$weight_i = \alpha + \beta \times height_i + \epsilon_i,\quad \epsilon_i \sim N(0,\sigma^2)$$

```{stan output.var = "workflow", eval = FALSE}
model {
  target += normal_lpdf(weight | alpha + beta * height, sigma);
}
```

## 2. **Specify likelihood & priors:** {.midi}

$$weight_i = \alpha + \beta \times height_i + \epsilon_i,\quad \epsilon_i \sim N(0,\sigma^2)$$

Think about reasonable priors for your parameters:

- $\alpha$ is the intercept, or average weight for someone who is zero inches (not a particularly useful number on its own)

- $\beta$ measures the association between weight and height, in pounds/inch

- $\sigma$ is the measurement error for the population

```{stan output.var = "workflow", eval = FALSE}
model {
  target += normal_lpdf(weight | alpha + beta * height, sigma);
  target += normal_lpdf(alpha | 0, 100);
  target += normal_lpdf(beta | 0, 10);
  target += normal_lpdf(sigma | 0, 5);
}
```

## 2. **Specify likelihood & priors:** {.midi}

$$\mathbb{E}[weight_i] = \alpha + \beta \times (height_i - \bar{x)},\quad\bar{x}=\frac{1}{n}\sum_{i=1}^n height_i$$

Think about reasonable priors for your parameters:

- $\alpha$ is the intercept, or average weight for someone who is an average height

```{stan output.var = "workflow", eval = FALSE}
model {
  target += normal_lpdf(weight | alpha + beta * height_c, sigma);
  target += normal_lpdf(alpha | 150, 5);
  target += normal_lpdf(beta | 0, 10);
  target += normal_lpdf(sigma | 0, 5);
}
```

## Quick aside

What does it mean to use the prior `sigma ~ normal(0, 5)`? 

- When a parameter is truncated, for example `real<lower = 0> sigma`, priors can still be placed across the real line, $\mathbb{R}$.

```{stan output.var = "workflow", eval = FALSE}
parameters {
  real<lower = 0> sigma;
}
model {
  target += normal_lpdf(sigma | 0, 5);
}
```

- This specification induces a prior on the truncated space $\mathbb{R}^+$. 

- The induced prior for `sigma` is a [half-normal distribution](https://en.wikipedia.org/wiki/Half-normal_distribution).

## Quick aside

- The half-normal is a useful prior for nonnegative parameters that should not be too large and may be very close to zero. 

- Similar distributions for scale parameters are [half-t](https://en.wikipedia.org/wiki/Folded-t_and_half-t_distributions) and [half-Cauchy](https://distribution-explorer.github.io/continuous/halfcauchy.html) priors, these have heavier tales.
```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 6
#| fig-height: 3
#| layout-ncol: 1
library(LaplacesDemon)
library(reshape2)
x <- seq(0.001, 10, length.out = 501)
norm <- LaplacesDemon::dhalfnorm(x, 1)
ig <- pscl::densigamma(x, 3, 1)
temp <- data.frame(x = x, normal = norm, inverse_gamma = ig)
dat.fig <- melt(temp, id.vars = "x", variable.name = "distribution")
levels(dat.fig$distribution) <- c("Half-normal(1)", "Inverse-gamma(3, 1)")
dat.fig |> ggplot(aes(x = x, y = value, color = distribution)) + 
  geom_line(lwd = 1.5) + 
  labs(x = expression(sigma), y = "Density", color = "Distribution")
```

## 3. **Check the model with simulated data:** {.small}

  1. Draw parameter values from priors.

  2. Generate data based on those parameter values.

  3. Fit model to generated data.

  4. Check fit is reasonable.

```{stan output.var = "workflow", eval = FALSE}
data {
  int<lower=0> n;
  vector[n] height_c;
}
generated quantities {
  vector[n] weight;
  real alpha = normal_rng(150, 5);
  real beta = normal_rng(0, 10);
  real sigma = fabs(normal_rng(0, 5));
  for (i in 1:n) {
    weight[i] = normal_rng(alpha + beta * height_c[i], sigma);
  }
}
```

- Need `algorithm = "Fixed_param"`.

## 3. **Check the model with simulated data:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 12
#| fig-height: 4
#| layout-ncol: 1
load(file = "robjects/07_fake_data.RData")
dat.fig |> ggplot(aes(x = value)) + 
  geom_histogram() +
  facet_grid(. ~ variable, scales = "free_x", labeller = label_parsed) + 
  labs(x = "Parameter Value", y = "Count", subtitle = "Posterior mean estimates across various simulated datasets")
```

## 4. **Fit the model to real data:** {.midi}

```{stan output.var = "workflow", eval = FALSE}
// saved in linear_regression_workflow.stan
data {
  int<lower = 1> n; // number of observations
  vector[n] weight; // outcome vector
  vector[n] height_c; // covariate vector
  int<lower = 1> n_pred; // number of new observations
  vector[n_pred] height_c_pred; // vector for new observations
}
parameters {
  real alpha;
  real beta;
  real<lower = 0> sigma;
}
model {
  target += normal_lpdf(weight | alpha + height_c * beta, sigma); // likelihood
  target += normal_lpdf(alpha | 150, 5);
  target += normal_lpdf(beta | 0, 10);
  target += normal_lpdf(sigma | 0, 5);
}
generated quantities {
  vector[n] in_sample;
  vector[n_pred] out_sample;
  vector[n] log_lik;
  for (i in 1:n) {
    in_sample[i] = normal_rng(alpha + height_c[i] * beta, sigma);
    log_lik[i] = normal_lpdf(weight[i] | alpha + height_c[i] * beta, sigma);
  }
  for (i in 1:n_pred) {
    out_sample[i] = normal_rng(alpha + height_c_pred[i] * beta, sigma);
  }
}
```

## 4. **Fit the model to real data:** {.midi}

```{r, eval = FALSE}
stan_data <- list(n = nrow(dat), 
                  height_c = (dat$height - mean(dat$height)), 
                  weight = dat$weight)
regression_model <- stan_model(file = "linear_regression_workflow.stan")
fit <- sampling(regression_model, data = stan_data)
print(fit)
```
```{r, echo = FALSE}
fit <- readRDS(file = "robjects/linear_regression_workflow.rds")
print(fit, pars = c("alpha", "beta", "sigma"), probs = c(0.025, 0.5, 0.975))
```

## 5. **Check diagnostics:**

```{r}
rstan::traceplot(fit, pars = c("alpha", "beta", "sigma"))
```

## 5. **Check diagnostics:**

```{r}
library(bayesplot)
mcmc_acf(fit, regex_pars = c("alpha", "beta", "sigma"))
```

## 6. **Examine posterior fit:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 12
#| fig-height: 4
#| layout-ncol: 1
pars <- rstan::extract(fit, pars = c("alpha", "beta", "sigma"))
dat.fig <- data.frame(alpha = pars$alpha, beta = pars$beta, sigma = pars$sigma, Intercept = pars$alpha - mean(dat$height) * pars$beta)
dat.fig <- reshape2::melt(dat.fig)
dat.fig |> ggplot(aes(x = value)) + 
  geom_histogram() + 
  facet_grid(.~ variable, scales = "free_x", labeller = label_parsed) + 
  labs(x = "Parameter", y = "Count", subtitle = "Posterior histrograms for model parameters")
```

## 6. **Examine posterior fit:**

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 6
#| fig-height: 4
#| layout-ncol: 1
alpha <- pars$alpha
beta <- pars$beta
x <- seq(min(dat$height), max(dat$height), length.out = 501)
out <- matrix(nrow = length(x), ncol = length(alpha))
for (i in 1:length(alpha)) out[, i] <- (alpha[i] - mean(dat$height) * beta[i]) + beta[i] * x
mean <- apply(out, 1, mean)
lower <- apply(out, 1, function(x) quantile(x, probs = 0.025))
upper <- apply(out, 1, function(x) quantile(x, probs = 0.975))
dat.fig <- data.frame(x, mean, lower, upper)
dat.fig |> ggplot(aes(x = x, y = mean)) + 
  geom_line() + 
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) + 
  geom_point(data = dat, aes(x = height, y = weight)) + 
  labs(x = "Height (inches)", y = "Weight (pounds)", subtitle = "Posterior regression line with 95% credible interval")
```
Regression line corresponds to posterior mean and 95% credible interval for $\mu = \alpha + \beta \times height_i$.

## 7.**Check predictions:**

```{r}
#| echo: true
#| fig-align: "center"
#| fig-height: 4
#| layout-nrow: 1
y_pred <- rstan::extract(fit, pars = "in_sample")$in_sample
ppc_dens_overlay(dat$weight, y_pred[1:100, ])
```

## 7. **Check predictions:** {.midi}

```{r}
#| echo: true
#| fig-align: "center"
#| fig-height: 1.75
#| fig-width: 4
#| layout-nrow: 2
#| layout-ncol: 2
ppc_stat(dat$weight, y_pred, stat = "mean") # from bayesplot
ppc_stat(dat$weight, y_pred, stat = "sd")
q025 <- function(y) quantile(y, 0.025)
q975 <- function(y) quantile(y, 0.975)
ppc_stat(dat$weight, y_pred, stat = "q025")
ppc_stat(dat$weight, y_pred, stat = "q975")
```

## 7. **Check predictions:** {.midi}

```{r}
#| echo: false
#| fig-align: "center"
#| fig-width: 6
#| fig-height: 4
#| layout-ncol: 1
in_sample <- rstan::extract(fit, pars = "in_sample")$in_sample
mean <- apply(in_sample, 2, mean)
lower <- apply(in_sample, 2, function(x) quantile(x, probs = 0.025))
upper <- apply(in_sample, 2, function(x) quantile(x, probs = 0.975))
dat.fig <- data.frame(x = dat$height, y = dat$weight, mean, lower, upper)
dat.fig |> ggplot(aes(x = x, y = y)) + 
  geom_point() + 
  geom_line(aes(x = x, y = mean)) + 
  geom_ribbon(data = dat.fig, aes(ymin = lower, ymax = upper), alpha = 0.3) + 
  labs(x = "Height (inches)", y = "Weight (pounds)", subtitle = "Posterior regression line with 95% predictive interval")
```
Regression line corresponds to posterior predictive distribution mean and 95% credible interval, $f(weight_{i'} | weight_{1:n})$.

## `shinystan`

```{r, eval = FALSE}
library(shinystan)
y <- dat$weight # need to define outcome as a global variable to be accessible
sso <- shinystan::launch_shinystan(fit)
```

## 8. Compare models

- Suppose we would like to compare our original model with models that also includes sex and an interaction between sex and height.

\begin{align*}
\mathbb{E}[weight_i] &= \alpha + \beta_1 height_i\\
\mathbb{E}[weight_i] &= \alpha + \beta_1 height_i + \beta_2 sex_i\\
\mathbb{E}[weight_i] &= \alpha + \beta_1 height_i + \beta_2 sex_i + \beta_3 height_i sex_i
\end{align*}

## 8. Compare models {.midi}

```{r, echo = FALSE, eval = FALSE}
regression_model <- stan_model(file = "robjects/linear_regression_ppd_log_lik.stan")
data_model1 <- list(n = nrow(dat),
                    p = 1,
                    Y = dat$weight,
                    X = cbind(1, dat$height - mean(dat$height)),
                    beta0 = 0,
                    sigma_beta = 10,
                    a = 3,
                    b = 1,
                    n_pred = 10,
                    X_pred = cbind(1, rnorm(10)))
fit_model1 <- sampling(regression_model, data = data_model1)
data_model2 <- list(n = nrow(dat),
                    p = 2,
                    Y = dat$weight,
                    X = cbind(1, dat$height - mean(dat$height), 1 * (dat$sex == "Female")),
                    beta0 = 0,
                    sigma_beta = 10,
                    a = 3,
                    b = 1,
                    n_pred = 10,
                    X_pred = cbind(1, rnorm(10), rbinom(10, 1, 0.5)))
fit_model2 <- sampling(regression_model, data = data_model2)
data_model3 <- list(n = nrow(dat),
                    p = 3,
                    Y = dat$weight,
                    X = cbind(1, dat$height - mean(dat$height), 1 * (dat$sex == "Female"), (dat$height - mean(dat$height)) * (1 * (dat$sex == "Female"))),
                    beta0 = 0,
                    sigma_beta = 10,
                    a = 3,
                    b = 1,
                    n_pred = 10,
                    X_pred = cbind(1, rnorm(10), rbinom(10, 1, 0.5), rnorm(10)))
fit_model3 <- sampling(regression_model, data = data_model3)
saveRDS(fit_model1, file = "robjects/linear_regression_workflow_model1.rds")
saveRDS(fit_model2, file = "robjects/linear_regression_workflow_model2.rds")
saveRDS(fit_model3, file = "robjects/linear_regression_workflow_model3.rds")
```

```{r, echo=FALSE}
fit_model1 <- readRDS(file = "robjects/linear_regression_workflow_model1.rds")
fit_model2 <- readRDS(file = "robjects/linear_regression_workflow_model2.rds")
fit_model3 <- readRDS(file = "robjects/linear_regression_workflow_model3.rds")
```

```{r}
###Compute individual WAIC
library(loo)
log_lik_model1 <- loo::extract_log_lik(fit_model1, parameter_name = "log_lik", merge_chains = TRUE)
log_lik_model2 <- loo::extract_log_lik(fit_model2, parameter_name = "log_lik", merge_chains = TRUE)
log_lik_model3 <- loo::extract_log_lik(fit_model3, parameter_name = "log_lik", merge_chains = TRUE)
waic_model1 <- loo::waic(log_lik_model1)
waic_model2 <- loo::waic(log_lik_model2)
waic_model3 <- loo::waic(log_lik_model3)

###Make a comparison
comp_waic <- loo::loo_compare(list("height_only" = waic_model1, "height_sex" = waic_model2, "interaction" = waic_model3))
print(comp_waic, digits = 2, simplify = FALSE)
```

## 8. Compare models {.midi}

```{r}
###Compute individual LOO-CV/LOO-IC
loo_model1 <- loo::loo(log_lik_model1)
loo_model2 <- loo::loo(log_lik_model2)
loo_model3 <- loo::loo(log_lik_model3)

###Make a comparison
comp_loo <- loo::loo_compare(list("height_only" = loo_model1, "height_sex" = loo_model2, "interaction" = loo_model3))
print(comp_loo, digits = 2, simplify = FALSE)
```

## The plan moving forward

- We have now learned all of the skills needed to implement a Bayesian workflow.

- The remainder of the course will be focused on introducing new models for types of data that are common when working in the biomedical data setting. 

## Prepare for next class

-   Work on [HW 02](https://biostat725-sp25.netlify.app/hw/hw-02)

-   Complete reading to prepare for next Thursday's lecture

-   Thursday's lecture: Nonlinear Regression

---
title: "Geospatial Modeling"
author: "Prof. Sam Berchuck"
date: "2025-03-20"
date-format: "MMM DD, YYYY"
footer: "[üîó BIOSTAT 725 - Spring 2025](https://biostat725-sp25.netlify.app/)"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: false
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    html-math-method: mathjax
filters:
  - parse-latex
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:      
    width: 200
bibliography: references.bib
---

```{r, echo=FALSE}
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(knitr)
library(bayesplot)
library(rstan)
```

## Review of last lecture

-   During our last lecture, we learned about Gaussian processes. 

-   We learned how to apply Gaussian processes to longitudinal (or time-series) data. 

-   The longitudinal setting is one-dimensional (i.e., time). Today we will learn about applying Gaussian processes in two-dimensions (i.e. space).


## Three Types of Spatial Data:

- Geostatistical Point Referenced Data

- Lattice Data (Areal Data)

- Spatial Point Process Data

  - All of these data settings can be extended to space-time
  
## Geostatistical Point Referenced Data

- Point observations of a continuously varying quantity over a region
 
  - Daily Concentrations of Ozone Over NC
  
![](./images/18/daily_ozone_intro.png){fig-align="center" height="400"}


## Geostatistical Point Referenced Data

- Daily Concentrations of PM2.5 Over the US

![](./images/18/pm_us.png){fig-align="center" height="450"}


## Lattice Data (Areal Data)

- Data observed at the level of an areal unit
  
  - County Level Sudden Infant Death Syndrome Counts

![](./images/18/lattice_data.png){fig-align="center" height="450"}
	


## Lattice Data (Areal Data)

- Birmingham Tract Level Poverty Levels

![](./images/18/Birmingham_Poverty.png){fig-align="center" height="500"}

## Spatial Point Process Data

- Analyzing the clustering of random locations
 
  - Locations of a certain tree type in a forest
  
  - Epicenter of earthquakes

- Sometimes difficult to differentiate from point referenced geostatistical data (visually)

## Spatial Point Process Data

- Minneapolis Convenience Store Locations

![](./images/18/Minneapolis_Convenience_withStores.png){fig-align="center" height="500"}
	
## Spatial Data Analysis: When?

- Anytime you have spatial information collected with your data.

- Increasing availability of some level of spatial information:

  - Latitude/longitude.
  
  - County, state, etc.
  
  - Imaging data.

## Spatial Data Analysis: Why?

  - Correct statistical inference (conditional independence may not be a valid assumption!).
	
	- Specific goals will depend on the type of spatial data you have and the objective of your analysis.

  - Producing maps with valid inference.

## Spatial Data Analysis: How?

- Bayesian Hierarchical Modeling:
		
  - Flexible framework to handle multiple levels of uncertainty.
  - Markov chain Monte Carlo (MCMC) offers computationally convenient solution to make inference.
  
- Frequentist methods also available through the EM algorithm.
	
  - Original frequentist methods ignore some of the uncertainty in estimating these spatial models.
  
## Goals of a Point-referenced Analysis

- Estimation and explanation: 
 
  - Typical regression parameter estimation.
	
	- How does temperature change across the domain (large-scale)?

- Prediction at unobserved locations:
 
  - Original development of spatial methods.
  
  - Kriging named after D.G. Krige (mining applications).

- Design issues:

  - Where to put a new air pollution monitor to optimize future prediction criteria?

## Goals of a Point-referenced Analysis

- Estimation and Explanation

![](./images/18/Temp.png){fig-align="center" height="500"}

## Goals of a Point-referenced Analysis

- Spatial Prediction 

![Observed Data](./images/18/geo_data_intro-eps-converted-to.png){fig-align="center" height="450"}

## Goals of a Point-referenced Analysis

- Spatial Prediction 
 
 ![Prediction](./images/18/kriging_est_intro.png){fig-align="center" height="450"}

## Goals of a Point-referenced Analysis

- Spatial Prediction 
 
 ![Standard Errors](./images/18/kriging_sd_intro-eps-converted-to.png){fig-align="center" height="450"}

## Point-referenced Modeling

- Observations closer in space tend to be more similar.

  - Common regression models assume independence among observations.
	
    - Not a valid assumption here, especially at short distances.

- Multivariate normal distribution with valid spatial covariance function used in Bayesian modeling.

  - Spatial covariance describes how observations are correlated based on their proximity to each other.

	- Advanced models built on similar ideas.

  - Latent processes often used.

## Point-referenced Modeling

$$  Y_{ij} = \alpha + \mathbf{x}_{ij} \boldsymbol{\beta} + \theta_i + \epsilon_{ij}, \quad \epsilon_{ij} \stackrel{iid}{\sim} N(0,\sigma^2).$$

**Data Objects:**

- $i \in \{1,\dots,n\}$ indexes unique locations.

- $j \in \{1,\dots,n_i\}$ indexes individuals at each location.

- $Y_{ij}$ denotes the observation of individual $j$ at location $i$.

- $\mathbf{x}_{ij} \in \mathbb{R}^{1 \times p}$, where $p$ is the number of predictors (excluding intercept).

## Point-referenced Modeling

$$Y_{ij} = \alpha + \mathbf{x}_{ij} \boldsymbol{\beta} + \theta_i + \epsilon_{ij}, \quad \epsilon_{ij} \stackrel{iid}{\sim} N(0,\sigma^2).$$

**Population Parameters:**

- $\alpha \in \mathbb{R}$ is the intercept.

- $\boldsymbol{\beta} \in \mathbb{R}^p$ is the regression coefficients.

- $\sigma^2 \in \mathbb{R}^+$ is the overall residual error (nugget).

## Point-referenced Modeling

$$Y_{ij} = \alpha + \mathbf{x}_{ij} \boldsymbol{\beta} + \theta_i + \epsilon_{ij}, \quad \epsilon_{ij} \stackrel{iid}{\sim} N(0,\sigma^2).$$

**Location-specific Parameters:**

- $\theta_i$ denotes the spatial intercept at location $\mathbf{u}_i$.

- $\mathbf{u}_i \in \mathbb{R}^d$ denotes the spatial location of location $i$. For example, $\mathbf{u}_i = (\text{latitude}_i, \text{longitude}_i)$, so that $d = 2$.

In a spatial context, we often use the following notation:

$$Y_j(\mathbf{u}_i) = \alpha + \mathbf{x}_j(\mathbf{u}_i)\boldsymbol{\beta} + \theta(\mathbf{u}_i) + \epsilon_i(\mathbf{u}_i).$$

## Location-specific Notation

$$\mathbf{Y}(\mathbf{u}_i) = \alpha \mathbf{1}_{n_i} + \mathbf{X}(\mathbf{u}_i) \boldsymbol{\beta} + \theta(\mathbf{u}_i)\mathbf{1}_{n_i} + \boldsymbol{\epsilon}(\mathbf{u}_i)$$

- $\mathbf{Y}(\mathbf{u}_i) = (Y_1(\mathbf{u}_i),\ldots,Y_{n_i}(\mathbf{u}_i))^\top$

- $\mathbf{X}(\mathbf{u}_i)$ is an $n_i \times p$ dimensional matrix with rows $\mathbf{x}_j(\mathbf{u}_i)$.

- $\boldsymbol{\epsilon}(\mathbf{u}_i) = (\epsilon_i(\mathbf{u}_i),\ldots,\epsilon_{n_i}(\mathbf{u}_i))^\top$, where $\epsilon_j(\mathbf{u}_i) \stackrel{iid}{\sim} N(0,\sigma^2)$.

Note: This notation is the same as the linear mixed model we have talked about in previous lectures.

## Full data notation

$$\mathbf{Y} = \alpha \mathbf{1}_{N} + \mathbf{X} \boldsymbol{\beta} + \mathbf{Z}\boldsymbol{\theta} + \boldsymbol{\epsilon}$$

- $\mathbf{Y} = (\mathbf{Y}(\mathbf{u}_1)^\top,\ldots,\mathbf{Y}(\mathbf{u}_{n})^\top)^\top \in \mathbb{R}^N$, with $N = \sum_{i=1}^n n_i$.

- $\mathbf{X} \in \mathbb{R}^{N \times p}$ that stacks $\mathbf{X}(\mathbf{u}_i)$.

- $\boldsymbol{\theta} = (\theta(\mathbf{u}_1),\ldots,\theta(\mathbf{u}_n))^\top \in \mathbb{R}^n$.

- $\mathbf{Z}$ is $N \times n$ dimensional binary matrix. Each row contains a single 1 in column $i$ that corresponds to the location of $Y_j(\mathbf{u}_i)$.

This notation is useful because it allows us to examine the vector of location-specific parameters, $\boldsymbol{\theta}$. Spatial dependency will be introduced through $\boldsymbol{\theta}$.

## Accounting for spatial correlation

- We want to model the spatial variation in $\boldsymbol{\theta}$ using a **prior** that reflects the spatial correlation between locations.

- One powerful way to incorporate spatial correlations is through Gaussian processes (GPs).

- Consider $\{\theta(\mathbf{u}) : \mathbf{u} \in \mathcal D\}$, where $\mathcal D$ is a fixed subset of $d$-dimensional Euclidean space ($d=1$ is time-series, $d=2,3$ is spatial).
  
- The process is said to be Gaussian if, for any $n\geq 1$ and observed locations $\{\mathbf{u}_1,\ldots,\mathbf{u}_n\}$, $\boldsymbol{\theta} = (\theta(\mathbf{u}_1),\ldots,\theta(\mathbf{u}_n))^\top$ has a multivariate normal distribution.

## Properties of Gaussian Processes

We define a GP as $\theta(\mathbf{u}) \sim GP(\mu(\cdot), C(\cdot, \cdot))$, where $\mu(\cdot)$ is the mean process and $C(\cdot, \cdot)$ is a covariance function.

- Mean function: $\mathbb{E}[\theta(\mathbf{u})] = \mu(\mathbf{u}) = 0$.

- Covariance function: $\mathbb{C}(\theta(\mathbf{u}_i),\theta(\mathbf{u}_{i'})) = C(\mathbf{u}_i, \mathbf{u}_{i'})$.

**Properties of covariance functions:**

- **Stationary**: $\mathbb{C}(\theta(\mathbf{u}),\theta(\mathbf{u} + \mathbf{h})) = C(\mathbf{h})$, where $\mathbf{h} \in \mathbf{R}^d$. 

- **Isotropic**: $\mathbb{C}(\theta(\mathbf{u}),\theta(\mathbf{u} + \mathbf{h})) = C(||\mathbf{h}||)$, where $||\cdot\||$ is a distance length. 

## Choosing a covariance function {.midi}

The Mat√©rn covariance function has a general form and is often the default choice for spatial data. Mat√©rn is a function of a smoothness parameter $\nu > 0$, magnitude $\tau$ and a length scale, which we will define as $\rho$. Given a fixed $\nu$, larger values of $\rho$ lead to a smoother surface.

- $\nu = 1/2$: exponential covariance function, `gp_exponential_cov`.

- $\nu = 3/2$: Mat√©rn 3/2 covariance function, `gp_matern32_cov`.

$$C(||\mathbf{h}||) = \tau^2 \left(1 + \frac{\sqrt{3} ||\mathbf{h}||}{\rho}\right) \exp\left(-\frac{\sqrt{3} ||\mathbf{h}||}{\rho}\right)$$

- $\nu = 5/2$: Mat√©rn 5/2 covariance function, `gp_matern52_cov`.

- $\nu \rightarrow \infty$: Squared exponential, `gp_exp_quad_cov`.

## Point-referenced spatial model

\begin{align*}
\mathbf{Y} | \alpha, \boldsymbol{\beta}, \boldsymbol{\theta},\sigma &\sim N_N(\alpha \mathbf{1}_{N} + \mathbf{X} \boldsymbol{\beta} + \mathbf{Z}\boldsymbol{\theta},\sigma^2 \mathbf{I}_N)\\
\boldsymbol{\theta} &\sim N_{n}(\mathbf{0}_n, \mathbf{C})\\
\boldsymbol{\Omega} &\sim f(\boldsymbol{\Omega}),
\end{align*}

where $\boldsymbol{\Omega} = (\alpha,\boldsymbol{\beta},\sigma,\tau,\rho)$ and 

$$\mathbf{C} = \begin{bmatrix}
C(0) & C(||\mathbf{u}_1 - \mathbf{u}_2||) & \cdots & C(||\mathbf{u}_1 - \mathbf{u}_{n}||)\\
C(||\mathbf{u}_1 - \mathbf{u}_2||) & C(0) & \cdots & C(||\mathbf{u}_2 - \mathbf{u}_{n}||)\\
\vdots & \vdots & \ddots & \vdots\\
C(||\mathbf{u}_{1} - \mathbf{u}_{n}||) & C(||\mathbf{u}_2 - \mathbf{u}_{n}||) & \cdots & C(0)\\
\end{bmatrix}.$$

## Point-referenced spatial model

Like previous lecture, we can also specify a marginal model which is useful if we are only intereted in population parameters, speed is of concern, or the conditional specification has poor convergence.

\begin{align*}
\mathbf{Y} | \boldsymbol{\Omega}  &\sim N_N(\alpha \mathbf{1}_{N} + \mathbf{X} \boldsymbol{\beta},\sigma^2 \mathbf{I}_N + \mathbf{Z} \mathbf{C} \mathbf{Z}^\top)\\
\boldsymbol{\Omega} &\sim f(\boldsymbol{\Omega})
\end{align*}

## Posterior predictive distribution {.midi}

Define $\mathbf{Y}^* = (Y(\mathbf{u}_{n+1}),\ldots, Y(\mathbf{u}_{n+q}))^\top$ as observations at $q$ new locations. We ignore the subscript $j$. The new location-specific parameters are $\boldsymbol{\theta} = (\theta(\mathbf{u}_{n+1}),\ldots,\theta(\mathbf{u}_{n+q}))^\top$.

\begin{align*}
f(\mathbf{Y}^* | \mathbf{Y}) &= \int f(\mathbf{Y}^*, \boldsymbol{\theta}^*, \boldsymbol{\theta}, \boldsymbol{\Omega} | \mathbf{Y}) d\boldsymbol{\theta}^* d\boldsymbol{\theta} d\boldsymbol{\Omega}\\
&= \int \underbrace{f(\mathbf{Y}^* | \boldsymbol{\theta}^*, \boldsymbol{\Omega})}_{(1)} \underbrace{f(\boldsymbol{\theta}^* | \boldsymbol{\theta}, \boldsymbol{\Omega})}_{(2)} \underbrace{f(\boldsymbol{\Omega} | \mathbf{Y})}_{(3)} d\boldsymbol{\theta}^* d\boldsymbol{\theta} d\boldsymbol{\Omega}\\
\end{align*}

(1) Likelihood: $f(\mathbf{Y}^* | \boldsymbol{\theta}^*, \boldsymbol{\Omega}) = \prod_{i=n+1}^{n+q} f(Y(\mathbf{u}_i) | \alpha, \boldsymbol{\beta}, \theta(\mathbf{u}_i),\sigma)$

(2) Kriging: $f(\boldsymbol{\theta}^* | \boldsymbol{\theta}, \boldsymbol{\Omega})$

(3) Posterior distribution: $f(\boldsymbol{\Omega} | \mathbf{Y})$

## Kriging Distribution {.smaller}

To compute $f(\boldsymbol{\theta}^* | \boldsymbol{\theta}, \boldsymbol{\Omega})$ we must specify the joint distribution:

$$f\left(\begin{bmatrix}
    \boldsymbol{\theta}\\
    \boldsymbol{\theta}^*
  \end{bmatrix} \Bigg| \boldsymbol{\Omega}\right) = N\left(\begin{bmatrix}
    \mathbf{0}_n \\
    \mathbf{0}_{q}
  \end{bmatrix}, \begin{bmatrix}
    \mathbf{C} & \mathbf{C}_{+}\\
    \mathbf{C}_{+}^\top & \mathbf{C}^*
  \end{bmatrix}\right),$$

where $\mathbf{C}$ is the covariance of $\boldsymbol{\theta}$,

$$\mathbf{C^*} = \begin{bmatrix}
C(0) & C(||\mathbf{u}_{n+1} - \mathbf{u}_{n+2}||) & \cdots & C(||\mathbf{u}_{n+1} - \mathbf{u}_{n + q}||)\\
C(||\mathbf{u}_{n+1} - \mathbf{u}_{n+2}||) & C(0) & \cdots & C(||\mathbf{u}_{n_2} - \mathbf{u}_{n + q}||)\\
\vdots & \vdots & \ddots & \vdots\\
C(||\mathbf{u}_{n + 1} - \mathbf{u}_{n + q}||) & C(||\mathbf{u}_{n + 2} - \mathbf{u}_{n + q}||) & \cdots & C(0)\\
\end{bmatrix} \in \mathbb{R}^{q \times q},$$

$$\mathbf{C_+} = \begin{bmatrix}
C(||\mathbf{u}_{1} - \mathbf{u}_{n+1}||) & C(||\mathbf{u}_{1} - \mathbf{u}_{n+2}||) & \cdots & C(||\mathbf{u}_{1} - \mathbf{u}_{n + q}||)\\
C(||\mathbf{u}_{2} - \mathbf{u}_{n+1}||) & C(||\mathbf{u}_{2} - \mathbf{u}_{n+2}||) & \cdots & C(||\mathbf{u}_{n} - \mathbf{u}_{n + q}||)\\
\vdots & \vdots & \ddots & \vdots\\
C(||\mathbf{u}_{n} - \mathbf{u}_{n + 1}||) & C(||\mathbf{u}_{n} - \mathbf{u}_{n+2}||) & \cdots & C(||\mathbf{u}_{n} - \mathbf{u}_{n+q}||)\\
\end{bmatrix} \in \mathbb{R}^{n \times q}.$$

## Kriging Distribution {.smaller}

We can then use the [conditional specification of a multivariate normal](https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Conditional_distributions) to find, $f(\boldsymbol{\theta}^* | \boldsymbol{\theta}, \boldsymbol{\Omega}) = N(\mathbb{E}_{\boldsymbol{\theta}^*},\mathbb{V}_{\boldsymbol{\theta}^*})$, where

\begin{align*}
\mathbb{E}_{\boldsymbol{\theta}^*} &= \mathbf{C}_+^\top \mathbf{C}^{-1} \boldsymbol{\theta}\\
\mathbb{V}_{\boldsymbol{\theta}^*} &= \mathbf{C}^* - \mathbf{C}_+^\top \mathbf{C}^{-1} \mathbf{C}_+.
\end{align*}

Computationally it is efficient to compute $\mathbf{L} = \text{chol}(\mathbf{C})$, such that $\mathbf{C} = \mathbf{L}\mathbf{L}^\top$ and write:

\begin{align*}
\mathbb{E}_{\boldsymbol{\theta}^*} &= \mathbf{C}_+^\top \left(\mathbf{L}\mathbf{L}^\top\right)^{-1} \boldsymbol{\theta}\\
&= \mathbf{C}_+^\top \left(\mathbf{L}^{-1}\right)^\top\mathbf{L}^{-1} \boldsymbol{\theta}\\
&= \left(\mathbf{L}^{-1} \mathbf{C}_+\right)^\top\mathbf{L}^{-1} \boldsymbol{\theta}.
\end{align*}

Efficient [Stan function](https://mc-stan.org/docs/functions-reference/matrix_operations.html#linear-algebra-functions-and-solvers): `mdivide_left_tri_low(A, b) = inverse(tri(A)) * b`.

\begin{align*}
\mathbb{V}_{\boldsymbol{\theta}^*} &=\mathbf{C}^* - \left(\mathbf{L}^{-1} \mathbf{C}_+\right)^\top \mathbf{L}^{-1} \mathbf{C}_+.
\end{align*}

Direclty computing $\mathbf{C}^{-1}$ can lead to a matrix that is not symmetric. 

## Motivating Dataset {.midi}

We will look at a sample of women aged 15-49 sampled from the 2013-14 Democratic Republic of Congo (DRC) Demographic and Health Survey. 

- There are ~8600 women who are nested in ~500 survey clusters. 

- Variables are:

  - `loc_id`: location id (i.e. survey cluster).

  - `hemoglobin`: hemoglobin level (g/dL).

  - `anemia`: anemia classifications.
  
  - `age`: age in years.

  - `urban`: urban vs. rural.

  - `LATNUM`: latitude.

  - `LONGNUM`: longitude.

## Motivating Dataset {.midi}

```{r, echo = FALSE}
library(rnaturalearth)
library(sf)

data <- read.csv(file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/course-material/data/drc/hemoglobin_anemia.csv")
data <- data[data$hemoglobin < 25, ]
# data$binary <- 1
# data$binary[data$anemia == "not anemic"] <- 0
data$X <- NULL
data$loc_id <- as.numeric(as.factor(data$loc_id))
data$mean_hemoglobin <- tapply(data$hemoglobin, list(data$loc_id), mean)[data$loc_id]
data$community_size <- tapply(data$hemoglobin, list(data$loc_id), length)[data$loc_id]
data$mean_age <- tapply(data$age, list(data$loc_id), length)[data$loc_id]
data <- data[order(data$loc_id), ]

###Convert to spatial dataset and merge DRC data
data_sf <- st_as_sf(data, coords = c("LONGNUM", "LATNUM"), crs = 4326)
congo_states_map <- ne_states(country = "Democratic Republic of the Congo", returnclass = "sf")
# Ensure that the CRS for the country and grid points match
congo_states_map <- st_transform(congo_states_map, crs = 4326)
data_sf_drc <- st_intersection(data_sf, congo_states_map)

###Create a smaller dataset with only a few states
# states_of_interest <- c("Sud-Kivu", "Maniema", "Nord-Kivu", "Orientale")
states_of_interest <- c("Sud-Kivu")
data_sf_states_of_interest <- data_sf_drc %>% filter(name %in% states_of_interest)
data_sf_states_of_interest <- data_sf_states_of_interest[order(data_sf_states_of_interest$loc_id), ]
head(data)
```

::: callout-important
## Modeling Goals:

  - Learn the associations between age and urbanality and hemoglobin, accounting for unmeasured spatial confounders.
  
  - Create a predicted map of hemoglobin across the spatial surface, with uncertainty quantification.
  
:::

## Visualize data

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 8
#| fig-height: 8

dat <- aggregate(data$hemoglobin, list(data$loc_id), mean)
colnames(dat) <- c("loc_id", "hemoglobin")
dat <- left_join(dat, data[, c("loc_id", "urban", "LATNUM", "LONGNUM")], by = "loc_id")
data_sf_whole <- st_as_sf(dat, coords = c("LONGNUM", "LATNUM"), crs = 4326)

# Get a map of the Democratic Republic of Congo (ne_states includes the states on the map)
congo_states_map <- ne_states(country = "Democratic Republic of the Congo", returnclass = "sf")

# Plot the map with community points
ggplot() +
  # Plot the map of DRC
  geom_sf(data = congo_states_map, fill = "lightblue", color = "black") +
  # Plot the points from your data
  geom_sf(data = data_sf_whole, aes(color = hemoglobin), shape = 16, size = 2) +
  scale_color_viridis_b() + 
  # Customize the plot appearance
  theme_minimal() +
  labs(title = "Average Hemoglobin Across Communities in the Democratic Republic of Congo",
       subtitle = "Points represent community locations with hemoglobin averages",
       x = "Longitude", y = "Latitude", color = "Hemoglobin (g/dL)") 
```

## Looking at community sizes

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 8
#| fig-height: 8
ggplot() +
  # Plot the map of DRC
  geom_sf(data = congo_states_map, fill = "lightblue", color = "black") +
  # Plot the points from your data
  geom_sf(data = data_sf_drc, aes(color = community_size), shape = 16, size = 2) +
  scale_color_viridis_b() + 
  # Customize the plot appearance
  theme_minimal() +
  labs(title = "Communities in the Democratic Republic of Congo",
       subtitle = "Points represent community locations with data",
       caption = "Data Source: rnaturalearth",
       x = "Longitude", y = "Latitude", color = "# of Participants") 


```

## Today we will focus on one state

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 8
#| fig-height: 8
#| layout-ncol: 2
# Plot the map of the selected states
ggplot() +
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = "lightblue", color = "black", size = 0.2) +
  # Plot the points from your data
  geom_sf(data = data_sf_states_of_interest, aes(color = community_size), shape = 16, size = 2) +
  scale_color_viridis_b() + 
  theme_minimal() +
  labs(title = "Community sizes",
       subtitle = paste("State:", paste(states_of_interest, collapse = ", ")),
       caption = "Data Source: rnaturalearth",
       color = "# of Participants") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank()) +
  coord_sf()  # Ensures the map is properly projected
# Plot the map of the selected states
ggplot() +
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = "lightblue", color = "black", size = 0.2) +
  # Plot the points from your data
  geom_sf(data = data_sf_states_of_interest[!duplicated(data_sf_states_of_interest$loc_id), ], aes(color = hemoglobin), shape = 16, size = 2) +
  scale_color_viridis_b() + 
  theme_minimal() +
  labs(title = "Average hemoglobin at each community",
       subtitle = paste("State:", paste(states_of_interest, collapse = ", ")),
       caption = "Data Source: rnaturalearth",
       color = "Hemoglobin (g/dL)") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank()) +
  coord_sf()  # Ensures the map is properly projected
```

## Modeling {.midi}

We specify the following model: 

\begin{align*}
Y_j(\mathbf{u}_i) &= \alpha + \mathbf{x}_j(\mathbf{u}_i) \boldsymbol{\beta} + \theta(\mathbf{u}_i) + \epsilon_j(\mathbf{u}_i), \quad \epsilon_j(\mathbf{u}_i) \stackrel{iid}{\sim} N(0,\sigma^2)\\
\boldsymbol{\theta} | \tau,\rho &\sim N(\mathbf{0}_n,\mathbf{C})\\
\alpha^* &\sim N(0,4^2)\\
\beta_j | \sigma_{\beta} &\sim N(0,\sigma_{\beta}^2), \quad j = 1,\ldots,p\\
\sigma &\sim \text{Half-Normal}(0, 2^2)\\
\tau &\sim \text{Half-Normal}(0, 4^2)\\
\rho &\sim \text{Inv-Gamma}(5, 5)\\
\sigma_{\beta} &\sim \text{Half-Normal}(0, 2^2)
\end{align*}

Where $N = 490$, $n = 29$, $\mathbf{x}_j(\mathbf{u}_i) = (\text{age}_{ij}/10, \text{urban}_i)$, and $\mathbf{C}$ is the Mat√©rn 3/2.

## Define the prediction grid

For prediction I created a $20 \times 20$ grid, making sure the points are in the surface.

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 5
#| fig-height: 5
#| layout-ncol: 2
# Extract bounding box coordinates for our particular states
bbox <- st_bbox(congo_states_map %>% filter(name %in% states_of_interest))

# Create a grid of points within the bounding box
# Adjust the step size for the grid resolution (e.g., 0.1 degree)
latitudes <- seq(bbox["ymin"], bbox["ymax"], length.out = 20)
longitudes <- seq(bbox["xmin"], bbox["xmax"], length.out = 20)
# latitudes <- seq(bbox[, "ymin"], bbox[, "ymax"], length.out = 20)
# longitudes <- seq(bbox[, "xmin"], bbox[, "xmax"], length.out = 20)

# Create a data frame with all combinations of latitudes and longitudes
grid_points <- expand.grid(lat = latitudes, long = longitudes)

# Convert the grid into an sf object
grid_sf <- st_as_sf(grid_points, coords = c("long", "lat"), crs = 4326)

# Ensure both the grid and the country map are in the same CRS
grid_sf <- st_transform(grid_sf, crs = 4326)

# Keep only points within the DRC boundary using st_within (points must be within the polygon)
grid_inside_drc <- grid_sf[st_within(grid_sf, congo_states_map %>% filter(name %in% states_of_interest), sparse = FALSE), ]

# Plot the grid points within the states
ggplot() +
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = "lightblue", color = "black") +
  geom_sf(data = grid_sf, color = "red", shape = 16, size = 1) +
  theme_minimal() +
  labs(title = "Grid of Points across Sud-Kivu",
       # subtitle = "Red points represent valid grid points inside DRC boundaries",
       x = "Longitude", y = "Latitude")
ggplot() +
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = "lightblue", color = "black") +
  geom_sf(data = grid_inside_drc, color = "red", shape = 16, size = 1) +
  theme_minimal() +
  labs(title = "Grid of Points WITHIN Sud-Kivu",
       # subtitle = "Red points represent valid grid points inside DRC boundaries",
       x = "Longitude", y = "Latitude")
```

## Stan code

```{stan output.var = "whole_model", eval = FALSE}
functions {
	matrix L_matern32(array[] vector x, real tau, real rho, real delta) { 
		matrix[size(x), size(x)] cov;
		cov = add_diag(gp_matern32_cov(x, tau, rho), delta);
		return cholesky_decompose(cov);
	}
  vector theta_new_rng(array[] vector x, array[] vector x_new, real tau, 
                        real rho, vector z_obs, real delta) {
    int n = size(x);
  	int q = size(x_new);
    vector[q] theta_new;
	  { // everything declared inside of {} will only exist in that local environment
      matrix[n, n] LC = L_matern32(x, tau, rho, delta);
      vector[n] theta_obs = LC * z_obs;
      matrix[n, q] Cplus = gp_matern32_cov(x, x_new, tau, rho);
      matrix[n, q] LCinv_Cplus = mdivide_left_tri_low(LC, Cplus);
      vector[n] LCinv_theta_obs = mdivide_left_tri_low(LC, theta_obs);
      vector[q] theta_new_mu = LCinv_Cplus' * LCinv_theta_obs;
      matrix[q, q] C_star = add_diag(gp_matern32_cov(x_new, tau, rho), delta);
      matrix[q, q] theta_new_cov = C_star - LCinv_Cplus' * LCinv_Cplus;
      theta_new = multi_normal_rng(theta_new_mu, theta_new_cov);
	}
	return theta_new;
	}
	matrix cov2cor(matrix V) { 
	  int p = rows(V); 
	  vector[p] Is = inv_sqrt(diagonal(V)); 
	  return quad_form_diag(V, Is); 
	 }
}
data {
  int<lower = 1> N;                        // number of observed data points
  int<lower = 1> p;                        // number of fixed covariates
  int<lower = 1> n;                        // number of unique locations
  int<lower = 1> d;                        // dimension of the spatial location
  int<lower = 1> q;                    // total number of points for prediction
  vector[N] Y;                             // observed data
  matrix[N, p] X;                          // design matrix - fixed effects
  array[N] int<lower = 1, upper = n> Ids;  // location mapping indices
  array[n] vector[d] u;                    // locations for observed data
  array[q] vector[d] u_new;          // locations for prediction
  matrix[q, p] X_new;                 // design matrix for the new locations
}
transformed data {
  real delta = 1e-9;
  matrix[N, p] X_centered;
  row_vector[p] X_bar;
  for (i in 1:p) {
    X_bar[i] = mean(X[, i]);
    X_centered[, i] = X[, i] - X_bar[i];
  }
}
parameters {
  // likelihood parameters
  real alpha_star;         // centered intercept
  vector[p] beta;          // population coefficients
  real<lower = 0> sigma;   // nugget error term
  // GP parameters
  real<lower = 0> tau;     // GP scale for intercept
  real<lower = 0> rho;     // GP length for intercept
  vector[n] z;             // standard normal
  // hyperparameters
  real<lower = 0> sigma_beta;     // variance for coefficients
}
transformed parameters {
    // compute spatial intercept
  matrix[n,n] LC = L_matern32(u, tau, rho, delta);
  vector[n] theta = LC * z; // spatial intercept
}
model {
  // likelihood
  target += normal_lupdf(Y | alpha_star + X_centered * beta + theta[Ids], sigma);
  // likelihood parameters
  target += normal_lupdf(alpha_star | 0, 4);
  target += normal_lupdf(beta | 0, sigma_beta);
  target += normal_lupdf(sigma | 0, 2);
  // GP parameters
  target += normal_lupdf(tau | 0, 4);
  target += inv_gamma_lupdf(rho | 5, 5);
  target += normal_lupdf(z | 0, 1);  
  // hyperparameters
  target += normal_lupdf(sigma_beta | 0, 2);
}
generated quantities {
  // intercepts
  real alpha = alpha_star - X_bar * beta;
  vector[n] alphas = alpha_star + theta;
  // covariance
  corr_matrix[n] Phi = cov2cor(add_diag(gp_matern32_cov(u, tau, rho), delta));
  // posterior predictive distribution for the observed locations
  array[N] real Y_pred = normal_rng(alpha + X * beta + theta[Ids], sigma);
  // posterior predictive distribution across a new grid of locations
  vector[q] theta_new = theta_new_rng(u, u_new, tau, rho, z, delta);
  array[q] real Y_new = normal_rng(alpha + X_new * beta + theta_new, sigma);
  // log-likelihood for loo
  array[N] real log_lik;
  for (i in 1:N) log_lik[i] = normal_lpdf(Y[i] | alpha + X[i, ] * beta + theta[Ids[i]], sigma);
}
```

## Function to compute $\mathbf{L}$

```{stan output.var = "L", eval = FALSE}
functions {
	matrix L_matern32(array[] vector x, real tau, real rho, real delta) { 
		matrix[size(x), size(x)] cov;
		cov = add_diag(gp_matern32_cov(x, tau, rho), delta);
		return cholesky_decompose(cov);
	}
	...
}
```

## Function to predict $\boldsymbol{\theta}^*$

```{stan output.var = "L", eval = FALSE}
functions {
  vector theta_new_rng(array[] vector x, array[] vector x_new, real tau, 
                        real rho, vector z_obs, real delta) {
    int n = size(x);
  	int q = size(x_new);
    vector[q] theta_new;
	  { // everything declared inside of {} will only exist in that local environment
      matrix[n, n] LC = L_matern32(x, tau, rho, delta);
      vector[n] theta_obs = LC * z_obs;
      matrix[n, q] Cplus = gp_matern32_cov(x, x_new, tau, rho);
      matrix[n, q] LCinv_Cplus = mdivide_left_tri_low(LC, Cplus);
      vector[n] LCinv_theta_obs = mdivide_left_tri_low(LC, theta_obs);
      vector[q] theta_new_mu = LCinv_Cplus' * LCinv_theta_obs;
      matrix[q, q] C_star = add_diag(gp_matern32_cov(x_new, tau, rho), delta);
      matrix[q, q] theta_new_cov = C_star - LCinv_Cplus' * LCinv_Cplus;
      theta_new = multi_normal_rng(theta_new_mu, theta_new_cov);
	}
	return theta_new;
	}
	...
}
```

## Posterior summaries

```{r, echo = FALSE}
Y <- data_sf_states_of_interest$hemoglobin
X <- model.matrix(~ I(age / 10) + as.factor(urban), data = data_sf_states_of_interest)[, -1]
# X <- model.matrix(~ 1, data = data_sf_states_of_interest)
Ids <- as.numeric(as.factor(data_sf_states_of_interest$loc_id))
u <- st_coordinates(data_sf_states_of_interest)[!duplicated(data_sf_states_of_interest$loc_id), ]
u_pred <- st_coordinates(grid_inside_drc)
stan_data <- list(
  N = length(Y),
  p = ncol(X),
  n = length(unique(Ids)),
  d = ncol(u),
  n_new = nrow(u_pred),
  Y = Y,
  X = X,
  Ids = Ids,
  u = u,
  u_new = u_pred,
  X_new = matrix(cbind(mean(data$age), 0), nrow = nrow(u_pred), ncol = ncol(X), byrow = TRUE)
  # X_pred = matrix(1, nrow = nrow(u_pred), ncol = ncol(X))
)
fit_spatial <- readRDS(file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/course-material/r-objects/19-fit-spatial.rds")
print(fit_spatial, pars = c("alpha", "beta", "sigma", "tau", "rho", "sigma_beta"))
```

## Traceplots

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 8
#| fig-height: 5
rstan::traceplot(fit_spatial, pars = c("alpha", "beta", "sigma", "tau", "rho", "sigma_beta"))
```

## Traceplots

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 11
#| fig-height: 7
rstan::traceplot(fit_spatial, pars = "theta")
```

## Traceplots

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 11
#| fig-height: 7
rstan::traceplot(fit_spatial, pars = "alphas")
```

## Posterior predictive check

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 8
#| fig-height: 5
Y_pred <- rstan::extract(fit_spatial, pars = "Y_pred")$Y_pred
bayesplot::ppc_dens_overlay(Y, Y_pred[1:100, ])
```

## Posterior correlation matrix

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 6
#| fig-height: 6
hc <- hclust(dist(u))
Phi <- rstan::extract(fit_spatial, pars = "Phi")$Phi
Phi_mean <- apply(Phi, c(2, 3), mean)
Phi_mean <- Phi_mean[hc$order, hc$order]
Phi_mean <- as.data.frame(Phi_mean)
colnames(Phi_mean) <- 1:ncol(Phi_mean)
Phi_mean$Var1 <- rownames(Phi_mean)
dat_fig <- pivot_longer(Phi_mean, 
                        cols = -Var1, 
                        names_to = "Var2", 
                        values_to = "Correlation")
dat_fig$Var1 <- factor(dat_fig$Var1, levels = rownames(Phi_mean))
dat_fig$Var2 <- factor(dat_fig$Var2, levels = rev(rownames(Phi_mean)))
ggplot(dat_fig, aes(x = Var1, y = Var2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Correlation Matrix Heatmap", 
       x = "Location", y = "Location", 
       fill = "Correlation",
       subtitle = "Locations were ordered based on a hierarchical clustering algorithm")
```

## Correlation as a function of distance

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 10
#| fig-height: 6
library(geodist)
D <- as.matrix(dist(u))
rho_mean <- mean(rstan::extract(fit_spatial, pars = "rho")$rho)
matern_3_2 <- function(h, rho) (1 + sqrt(3) * h / rho) * exp(- sqrt(3) * h / rho)
dist_miles <- geodist::geodist_vec(
  x1 = u[, 1],
  y1 = u[, 2],
  paired = TRUE,
  measure = "haversine"
) / 1609
dists <- cbind(unique(D[D != 0]), unique(dist_miles[dist_miles != 0]))
dists <- dists[order(dists[, 1]), ]
corrs <- matern_3_2(dists[, 1], rho = rho_mean)
dists <- cbind(corrs, dists)
colnames(dists) <- c("Correlation", "Geodesic", "Mile")
dists <- data.frame(dists)
dat_fig <- pivot_longer(dists, cols = c("Geodesic", "Mile"), names_to = "Distance")
ggplot(dat_fig, aes(x = value, y = Correlation)) + 
  geom_line() + 
  facet_grid(. ~ Distance, scales = "free_x") + 
  labs(x = "Distance")
```

## Posterior predictive distribution

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 5.5
#| fig-height: 6.5
#| layout-ncol: 2
Y_new <- rstan::extract(fit_spatial, pars = "Y_new")$Y_new
means <- apply(Y_new, 2, mean)
sds <- apply(Y_new, 2, sd)

grid_inside_drc$prediction_mean <- means
grid_inside_drc$prediction_sd <- sds

# Plot the map of the selected states
pmean <- ggplot() +
  # Plot the points from your data
  geom_sf(data = grid_inside_drc, aes(color = prediction_mean), shape = 15, size = 10) +
  scale_color_viridis_c() + 
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = NA, color = "black", size = 1) +
  geom_sf(data = data_sf_states_of_interest[!duplicated(data_sf_states_of_interest$loc_id), ], col = "gray", shape = 16, size = 2) +
  theme_minimal() +
  labs(title = "Posterior Predictive Distribution Mean",
       subtitle = paste("State:", paste(states_of_interest, collapse = ", ")),
       caption = "Data Source: rnaturalearth",
       color = "Posterior Mean") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank()) +
  coord_sf()  # Ensures the map is properly projected

# Plot the map of the selected states
psd <- ggplot() +
  # Plot the points from your data
  geom_sf(data = grid_inside_drc, aes(color = prediction_sd), shape = 15, size = 10) +
  scale_color_viridis_c() + 
  geom_sf(data = congo_states_map %>% filter(name %in% states_of_interest), fill = NA, color = "black", size = 1) +
  geom_sf(data = data_sf_states_of_interest[!duplicated(data_sf_states_of_interest$loc_id), ], col = "gray", shape = 16, size = 2) +
  theme_minimal() +
  labs(title = "Posterior Predictive Distribution Standard Deviation (SD)",
       subtitle = paste("State:", paste(states_of_interest, collapse = ", ")),
       caption = "Data Source: rnaturalearth",
       color = "Posterior SD") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank()) +
  coord_sf()  # Ensures the map is properly projected
print(pmean)
print(psd)
# grid.arrange(pmean, psd, ncol = 2)
```

## Trying to understand these trends

 ![](./images/18/sud-kivu1.png){fig-align="center" height="550"}

## Trying to understand these trends

 ![](./images/18/sud-kivu2.png){fig-align="center" height="550"}

## Prepare for next class

-   Work on HW 04, which is due before class on Tuesday.

-   Complete reading to prepare for next Tuesday's lecture

-   Tuesday's lecture: Disease mapping

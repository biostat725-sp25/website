{
  "hash": "2f698322604c43fe4186da641e8f5a94",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Priors, Posteriors, and PPDs!\"\nauthor: \"Prof. Sam Berchuck\"\ndate: \"2025-01-23\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[ðŸ”— BIOSTAT 725 - Spring 2025](https://biostat725-sp25.netlify.app/)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    html-math-method: mathjax\nfilters:\n  - parse-latex\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Review of last lecture\n\nOn Tuesday, we learned about Stan\n\n-   A probabilistic programming language for Bayesian inference\n\n-   We learned about the **data**, **parameter**, and **model** code chunks\n\n-   We used Stan to fit a Bayesian linear regression\n\nToday, we will dive into priors, posterior summaries, and posterior predictive distributions (PPDs)\n\n# Priors\n\n## Prior elicitation\n\n-   Selecting the prior is one of the most important steps in a Bayesian analysis.\n\n-   There is no \"right\" way to select a prior.\n\n-   The choices often depend on the objective of the study and the nature of the data.\n\n    1.  Conjugate versus non-conjugate\n\n    2.  Informative versus uninformative\n\n    3.  Proper versus improper\n\n    4.  Subjective versus objective\n\n## Conjugate priors\n\n-   A prior is conjugate if the posterior is a member of the same parametric family.\n\n-   We have seen that if the response is normal and we use a normal prior on the regression parameter, the posterior is also a normal (if we use an inverse gamma distribution for the variance, the posterior is also inverse gamma).\n\n    -   This requires a pairing of the likelihood and prior.\n\n    -   There is a long list of [conjugate priors](https://en.wikipedia.org/wiki/Conjugate_prior).\n\n-   The advantage of a conjugate prior is that the posterior is available in closed form.\n\n-   No longer critical with Stan!\n\n## Informative versus uninformative priors\n\n-   In some cases informative priors are available.\n\n-   Potential sources include: literature reviews; pilot studies; expert opinions; etc.\n\n-   Prior elicitation is the process of converting expert information to prior distribution.\n\n-   For example, the expert might not comprehend an inverse gamma pdf, but if they give you an estimate and a spread you can back out $a$ and $b$.\n\n## Informative versus uninformative priors\n\n-   Strong priors for the parameters of interest can be hard to defend.\n\n-   Strong priors for nuisance parameters are more common.\n\n-   For example, say you are doing a Bayesian t-test to study the mean $\\mu$, you might use an informative prior for the nuisance parameter $\\sigma^2$.\n\n-   Any time informative priors are used you should conduct a sensitivity analysis.\n\n    -   That is, compare the posterior for several priors.\n\n## Informative versus uninformative priors\n\n-   In most cases prior information is not available and so uninformative priors are used.\n\n-   Other names: vague, weak, flat, diffuse, etc.\n\n    -   These all refer to priors with large variance.\n\n-   Examples: $\\theta \\sim Uniform(0, 1)$ or $\\mu âˆ¼ N(0, 1000^2)$\n\n-   Uninformative priors can be conjugate or not conjugate.\n\n-   The idea is that the likelihood overwhelms the prior.\n\n-   You should verify this with a sensitivity analysis.\n\n## Improper priors\n\n-   Extreme case: $\\mu \\sim N(0, \\tau^2)$ and we set $\\tau = \\infty$.\n\n-   A \"prior\" that doesnâ€™t integrate to one is called **improper**.\n\n-   Example: $f(\\mu) = 1$ for all $\\mu \\in \\mathbb{R}$.\n\n-   Itâ€™s OK to use an improper prior so long as you verify that the posterior integrates to one.\n\n-   For example, in linear regression an improper prior can be used for the slopes as long as the number of observations exceeds the number of covariates and there are no redundant predictors.\n\n## Subjective versus objective priors\n\n-   A subjective Bayesian picks a prior that corresponds to their current state of knowledge before collecting data.\n\n-   Of course, if the reader does not share this prior then they might not accept the analysis, and so sensitivity analysis is common.\n\n-   An **objective analysis** is one that requires no subjective decisions by the analyst.\n\n-   Subjective decisions include picking the likelihood, treatment of outliers, transformations, ... and prior specification.\n\n-   A completely objective analysis may be feasible in tightly controlled experiments, but is impossible in many analyses.\n\n## Objective Bayes\n\n-   An objective Bayesian attempts to replace the subjective choice of prior with an algorithm that determines the prior.\n\n-   There are many approaches: Jeffreys, reference, probability matching, maximum entropy, empirical Bayes, penalized complexity, etc.\n\n-   Jeffreys priors are the most common: $f(\\boldsymbol{\\theta}) \\propto \\sqrt{\\det[I(\\boldsymbol{\\theta})]}$, where $I(\\boldsymbol{\\theta})_{ij} = \\mathbb{E}\\left[\\frac{f(\\mathbf{Y}|\\boldsymbol{\\theta})}{\\partial \\theta_i}\\frac{f(\\mathbf{Y}|\\boldsymbol{\\theta})}{\\partial \\theta_j}\\right]$ is the Fisher Information matrix.\n\n-   Many of these priors are improper and so you have to check that the posterior is proper.\n\n## Hyperpriors\n\n**Prior** is the name for the distribution of model parameters that show up in the likelihood.\n\n-   For example: In linear regression, $\\boldsymbol{\\beta}$ and $\\sigma^2$ are parameters in the likelihood, thus $f(\\boldsymbol{\\beta})$ and $f(\\sigma^2)$ are called priors.\n\n**Hyperprior** is the name for the distribution of model parameters not in the likelihood.\n\n**Hyperparameter** is the name for the parameters in a hyperprior.\n\n## Hyperpriors\n\n-   For example: Suppose in linear regression, we place the following prior for $\\boldsymbol{\\beta}$, $f(\\boldsymbol{\\beta} | \\boldsymbol{\\beta}_0, \\sigma_{\\beta}^2) = N(\\boldsymbol{\\beta}_0,\\sigma_{\\beta}^2 \\mathbf{I})$ and\n\n    -   $f(\\boldsymbol{\\beta}_0) = N(\\mathbf{0}, \\mathbf{I})$\n\n    -   $f(\\sigma_{\\beta}^2) = IG(a_{\\beta}, b_{\\beta})$\n\n-   $f(\\boldsymbol{\\beta}_0)$ and $f(\\sigma_{\\beta}^2)$ are **hyperpriors**.\n\n-   $a_{\\beta}, b_{\\beta}$ are **hyperparameters**.\n\n. . .\n\n**Question:** Why would a researcher be interested in a hyperprior?\n\n## Prior predictive checks\n\n-   Use the prior distribution to obtain samples of the data, $\\mathbf{Y}$.\n\n\\begin{align*}\nf(\\mathbf{Y}) &= \\int f(\\mathbf{Y}, \\boldsymbol{\\theta}) d\\boldsymbol{\\theta}\\\\\n&= \\int f(\\mathbf{Y} | \\boldsymbol{\\theta})f(\\boldsymbol{\\theta}) d\\boldsymbol{\\theta}\n\\end{align*}\n\n-   This is easy to sample from using the following steps, 1. $\\boldsymbol{\\theta}^{sim} \\sim f(\\boldsymbol{\\theta})$ and 2. $\\mathbf{Y}^{sim} \\sim f(\\mathbf{Y} | \\boldsymbol{\\theta}^{sim})$.\n\n-   Similar to Gibbs sampling, this gives a sample from the joint $(\\mathbf{Y}^{sim}, \\boldsymbol{\\theta}^{sim})$ and also the marginal $\\mathbf{Y}^{sim}$.\n\n## Prior predictive checks\n\n-   Suppose that I am interested in modeling the number of patients who are in the waiting room during an hour in the Duke ED, $Y_i$.\n\n-   We can model this random variable as $Y_i \\stackrel{iid}{\\sim}Poisson(\\lambda)$ for $i = 1,\\ldots,n$. A conjugate prior for $\\lambda$ is $\\lambda \\sim Gamma(a,b)$.\n\n-   We know from experience that on average there are 20 patients waiting during an hour, so we want $\\mathbb{E}[Y_i]=\\lambda = 20$.\n\n-   Thus, we place a prior on $\\lambda$ that is centered at 20, which requires that $a/b=20$.\n\n-   There are infinitely many priors specifications.\n\n## Prior predictive checks\n\n-   Prior predictive checks can be used to determine a realistic specification for $a$ and $b$.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell output.var='prior pc'}\n\n```{.stan .cell-code}\ndata {\n  int<lower = 1> n;\n  real<lower = 0> a;\n  real<lower = 0> b;\n}\ngenerated quantities {\n  real lambda = gamma_rng(a, b);\n  vector[n] y_sim;\n  for (i in 1:n) y_sim[i] = poisson_rng(lambda);\n}\n```\n:::\n\n\n\n-   When running Stan for prior predictive checks you must specify `algorithm = \"Fixed_param\"`\n\n## Visualizing prior predictive checks {.midi}\n\n\n\n::: {.cell layout-nrow=\"1\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-priors-ppds_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n-   We can use the samples of $Y_i$ under different prior specifications to compute a summary statstic, for example for the maximum value.\n\n# Posterior summaries\n\n## Posterior summaries: point estimates\n\n-   The output of Bayesian inference is a probability distribution. It is often convenient to summarize the posterior in various ways.\n\n-   Usually summaries are computed for individual parameters using the marginal distributions,\n\n$$f(\\theta_i|\\mathbf{Y}) = \\int f(\\boldsymbol{\\theta} | \\mathbf{Y}) d\\boldsymbol{\\theta}_{-i}.$$\n\n-   The **posterior mean** is defined by,\n\n$$\\int_{-\\infty}^{\\infty}\\theta_i f(\\theta_i|\\mathbf{Y}) d\\theta_i.$$\n\n## Posterior summaries: point estimates\n\n-   The **posterior median** *m* is defined by,\n\n$$\\int_{-\\infty}^{m} f(\\theta_i|\\mathbf{Y}) d\\theta_i = 0.5 = \\int_m^{\\infty} f(\\theta_i|\\mathbf{Y}) d\\theta_i.$$\n\n-   The **posterior mode** is given by,\n\n$$M=\\text{argmax} f(\\theta_i|\\mathbf{Y}) $$\n\n-   The mean and mode are also well defined for the joint posterior distribution.\n\n## Posterior summaries: intervals\n\n-   The Bayesian analogue of a frequentist confidence interval is a **credible interval**.\n\n-   An interval $(a,b)$ is a $100(1-\\alpha)\\%$ posterior credible interval for $\\theta_i$ if\n\n$$\\int_a^b f(\\theta_i|\\mathbf{Y}) d\\theta_i = (1-\\alpha),\\quad 0\\leq \\alpha \\leq 1.$$\n\n-   A **credible region** can be defined similarly for a joint distribution.\n\n## Posterior summaries: intervals\n\n-   Credible intervals are not unique. The two most common are **symmetric** and **highest posterior density (HPD)**.\n\n    -   Symmetric: An interval $(a,b)$ is a symmetric $100(1-\\alpha)\\%$ credible interval if,\n\n    $$\\int_{-\\infty}^a f(\\theta_i|\\mathbf{Y}) d\\theta_i = \\frac{\\alpha}{2} = \\int_b^{\\infty} f(\\theta_i|\\mathbf{Y}) d\\theta_i.$$\n\n    -   Highest posterior density (HPD): An interval $(a,b)$ is a $100(1-\\alpha)\\%$ HPD interval if,\n\n        1.  $[a,b]$ is a $100(1-\\alpha)\\%$ credible interval for $\\theta_i$\n\n        2.  For all $\\theta_i \\in [a,b]$ and $\\theta_i^* \\notin [a,b]$, $f(\\theta_i|\\mathbf{Y}) \\geq f(\\theta_i^*|\\mathbf{Y})$\n\n## Posterior summaries: HPD credible interval\n\n![](images/05/hpd.png){fig-alt=\"hpd-hoff\" fig-align=\"center\" height=\"5in\"}\n\n## Posterior summaries: HPD credible interval\n\n![](images/05/hpd-other.png){fig-alt=\"hpd-other\" fig-align=\"center\" height=\"5in\"}\n\n## Posterior summaries: probability\n\n-   We may be interested in a hypothesis test: $H_0: \\theta \\leq c$ versus $H_1: \\theta \\geq c$\n\n-   We can report the posterior probability of the null hypothesis\n\n    -   $P(\\theta \\leq c | \\mathbf{Y}) = \\mathbb{E}[1(\\theta \\leq c) | \\mathbf{Y}]$\n\n-   Interpretation of the posteriour probability:\n\n    -   Probability that the null is true $P(\\theta \\leq c | \\mathbf{Y})$\n\n-   Interpretation of the p-value:\n\n    -   Probability of observing a test-statistic as or more extreme given that the null is true\n\n    -   Evidence for or against the null (reject or fail to reject)\n\n## Posterior summaries: estimation\n\n-   We have already seen that we can use MC or MCMC to estimate these posterior summaries!\n\n-   To compute the HPD interval we can use the `hdi` function from the `ggdist` R package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdist)\ny <- rgamma(10000, 3, 1)\nquantile(y, probs = c(0.025, 0.975))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    2.5%    97.5% \n0.610091 7.096755 \n```\n\n\n:::\n\n```{.r .cell-code}\nggdist::hdi(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]     [,2]\n[1,] 0.3306513 6.319382\n```\n\n\n:::\n:::\n\n\n\n# Posterior predictive distribution (PPD)\n\n## Linear regression recall\n\n-   Assume we observe $(Y_i,\\mathbf{x}_i)$ for $i = 1,\\ldots,n$, where $$Y_i|\\boldsymbol{\\beta},\\sigma^2 \\sim N(\\mathbf{x}_i \\boldsymbol{\\beta}, \\sigma^2).$$\n\n-   The full data likelihood is given by, $$f(\\mathbf{Y} | \\boldsymbol{\\beta},\\sigma^2) = \\prod_{i=1}^n f(Y_i|\\boldsymbol{\\beta},\\sigma^2),$$ where $\\mathbf{Y} = (Y_1,\\ldots,Y_n)$.\n\n-   We have parameters $\\boldsymbol{\\theta} = (\\boldsymbol{\\beta}^\\top,\\sigma^2)$ and $f(\\boldsymbol{\\theta}) = f(\\boldsymbol{\\beta})f(\\sigma^2)$.\n\n## Posterior predictive distribution: definition {.midi}\n\n-   Assume we observe a new $\\mathbf{x}'$ and we would like to make some type of prediction about $Y'$ given the data we have already observed, $\\mathbf{Y}$.\n\n-   The **posterior predictive distribution** is defined as $f(Y'|\\mathbf{Y})$ and can be written as, \\begin{align*}\n    f(Y' | \\mathbf{Y}) &= \\int f(Y' , \\boldsymbol{\\theta} | \\mathbf{Y}) d\\boldsymbol{\\theta},\\quad\\text{(marginal)}\\\\\n    &= \\int f(Y' | \\boldsymbol{\\theta},\\mathbf{Y}) f(\\boldsymbol{\\theta} | \\mathbf{Y})d\\boldsymbol{\\theta},\\quad\\text{(conditional)}\\\\\n    &= \\int \\underbrace{f(Y' | \\boldsymbol{\\theta})}_{likelihood} \\underbrace{f(\\boldsymbol{\\theta} | \\mathbf{Y})}_{posterior}d\\boldsymbol{\\theta}.\\quad\\text{(independence)}\n    \\end{align*}\n\n## Posterior predictive distribution: estimation {.midi}\n\n-   The PPD can be written as an expectation,\n\n$$f(Y' | \\mathbf{Y})  = \\int f(Y' | \\boldsymbol{\\theta}) f(\\boldsymbol{\\theta} | \\mathbf{Y})d\\boldsymbol{\\theta} = \\mathbb{E}_{\\boldsymbol{\\theta} | \\mathbf{Y}}\\left[f(Y' | \\boldsymbol{\\theta})\\right].$$\n\n-   Thus, we can estimate the PPD using a Monte Carlo estimate,\n\n$$\\mathbb{E}_{\\boldsymbol{\\theta} | \\mathbf{Y}}\\left[f(Y' | \\boldsymbol{\\theta})\\right] \\approx \\frac{1}{S} \\sum_{s = 1}^S f\\left(Y' | \\boldsymbol{\\theta}^{(s)}\\right),$$\n\nwhere $\\left\\{\\boldsymbol{\\theta}^{(1)},\\ldots,\\boldsymbol{\\theta}^{(S)}\\right\\}$ are samples from the posterior.\n\n## Posterior predictive distribution: Stan\n\n-   We want to compute the posterior predictive distribution.\n\n-   Use **generated quantities** block.\n\n\n\n::: {.cell output.var='ppd'}\n\n```{.stan .cell-code}\ngenerated quantities {\n  vector[n] in_sample;\n  for (i in 1:n) {\n    in_sample[i] = normal_rng(X[i] * beta, sigma);\n  }\n}\n```\n:::\n\n\n\n## Posterior predictive distribution: Stan {.midi}\n\n\n\n::: {.cell output.var='ppd'}\n\n```{.stan .cell-code}\ngenerated quantities {\n  vector[n] in_sample;\n  for (i in 1:n) {\n    in_sample[i] = normal_rng(X[i] * beta, sigma);\n  }\n}\n```\n:::\n\n\n\nThe function `normal_rng` generates a single independent sample from a normal distribution with parameters:\n\n-   `mean = X[i, ] * beta`, where `beta` is a sample from the estimated posterior.\n\n-   `sd = sigma`, where `sigma` is a sample from the estimated posterior.\n\nThis computes the posterior predictive distribution for the original data.\n\n## Posterior predictive distribution: Stan {.midi}\n\nThe following additions are added to the linear regression Stan code.\n\n\n\n::: {.cell output.var='ppd'}\n\n```{.stan .cell-code}\n// saved in linear_regression_ppd.stan\ndata {\n  ...\n  int<lower = 1> n_pred; // number of new observations\n  matrix[n_pred, p + 1] X_pred; // covariate matrix for new observations\n}\ngenerated quantities {\n  vector[n] in_sample;\n  vector[n_pred] out_sample;\n  for (i in 1:n) {\n    in_sample[i] = normal_rng(X[i, ] * beta, sigma);\n  }\n  for (i in 1:n_pred) {\n    out_sample[i] = normal_rng(X_pred[i, ] * beta, sigma);\n  }\n}\n```\n:::\n\n\n\n## Let's simulate some data again\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###True parameters\nsigma <- 1.5 # true measurement error\nbeta <- matrix(c(-1.5, 3), ncol = 1) # true beta\n\n###Simulation settings\nn <- 100 # number of observations\np <- length(beta) - 1 # number of covariates\nn_pred <- 10\n  \n###Simulate data\nset.seed(54) # set seed\nX <- cbind(1, matrix(rnorm(n * p), ncol = p))\nY <- as.numeric(X %*% beta + rnorm(n, 0, sigma))\nX_pred <- cbind(1, matrix(rnorm(n_pred * p), ncol = p))\nY_pred <- as.numeric(X_pred %*% beta + rnorm(n_pred, 0, sigma))\n```\n:::\n\n\n\n## Fit linear regression using Stan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###Load packages\nlibrary(rstan)\n\n###Create stan data object\nstan_data <- list(n = n, p = p, Y = Y, X = X,\n                  beta0 = 0, sigma_beta = 10, a = 3,  b = 1,\n                  n_pred = n_pred, X_pred = X_pred)\n  \n###Compile model separately\nstan_model <- stan_model(file = \"linear_regression_ppd.stan\")\n\n###Run model and save\nfit <- sampling(stan_model, data = stan_data, \n                chains = 4, iter = 1000)\nsaveRDS(fit, file = \"linear_regression_ppd_fit.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Examining prediction performance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###Inspect the ppd\nppds <- extract(fit, pars = c(\"in_sample\", \"out_sample\"))\nlapply(ppds, dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$in_sample\n[1] 2000  100\n\n$out_sample\n[1] 2000   10\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-nrow=\"1\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-priors-ppds_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Prepare for next class\n\n-   Work on [HW 01](https://biostat725-sp25.netlify.app/hw/hw-01) which is due next Tuesday before class\n\n-   Be sure to turn in your AE by Sunday evening\n\n-   Complete reading to prepare for next Tuesday's lecture\n\n-   Tuesday's lecture: Model checking\n",
    "supporting": [
      "05-priors-ppds_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
---
title: "AE 08: Disease Mapping"
subtitle: "Modeling diabetes across Durham county"
date: "March 25, 2025"
---

::: callout-important
## Due date

Application exercises (AEs) are submitted by pushing your work to the relevant GitHub repo. AEs from Tuesday lectures should be submitted by Friday by 11:59pm ET, and AEs from Thursday lectures should be submitted by Sunday at 11:59pm ET. Because AEs are intended for in-class activities, there are no extensions given on AEs.

-   Final `.qmd` and `.pdf` files pushed to your GitHub repo
-   **Note:** For homeworks and exams, you will also be required to submit your final `.pdf` file submitted on Gradescope
:::

# Getting Started

## Clone the repo & start new RStudio project

-   Go to the course organization at [github.com/biostat725-sp25](https://github.com/biostat725-sp25) organization on GitHub.
-   Click on the repo with the prefix **ae-08-**. It contains the starter documents you need to complete the AE.
-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.
    -   See the [HW 00 instructions](https://biostat725-sp25.netlify.app/hw/hw-00#connect-rstudio-and-github) if you have not set up the SSH key or configured git.
-   In RStudio, go to *File* $\rightarrow$ *New Project* $\rightarrow$ *Version Control* $\rightarrow$ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.
-   Click `ae-08.qmd` to open the template Quarto file. This is where you will write up your code and narrative for the AE.

# R packages

We will begin by loading R packages that we will use in this AE.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)     # data wrangling and visualization
library(knitr)         # format output
library(rstan)         # Stan
library(bayesplot)     # figures for post Stan inference
library(loo)           # model comparison
library(sf)            # functions to work with spatial data
# new library
library(tigris)        # to get boundary information for Durham tracts
library(spdep)         # compute adjacency matrix
```

# Data

## The Durham Neighborhood Compass

-   The [Durham Neighborhood Compass](https://compass.durhamnc.gov) is a public data portal developed by the City and County of Durham, NC. It provides **neighborhood-level indicators** across many topics, including: health (e.g., diabetes, asthma), education, housing and development, crime and safety, and demographics and equity. Most indicators are available at the **census tract level**, allowing for spatial analysis of neighborhoods within Durham County. Data are updated regularly and reflect community conditions over time. Today we will focus on adult diabetes prevalence by census tract in 2019. The data is available in `dnc.csv` and can be downloaded directly from the Durham Neighborhood Compass website.

The variables in the dataset are as follows and are specific to each census tract in 2019.

-   `GEOID`: location id for each census tract.

-   `diabetes`: percentage of adults with diabetes.

-   `education`: percentage of adults with a bachelors degree or higher.

-   `income`: median household income, in \$10,000.

-   `color`: percentage of people of color.

The data set is available in your AE repos and is called `dnc`.

```{r, message = FALSE, warning = FALSE, eval = FALSE}
dnc <- read_csv("data/dnc.csv")
```

```{r, message = FALSE, warning = FALSE, echo = FALSE}
library(DT)
dnc <- read.csv(file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/repos/ae-08/data/dnc.csv")
DT::datatable(dnc)
```

## Creating an analysis dataset

We will begin by extracting the spatial information for Durham County, NC using the `tigris` R package.

```{r, message = FALSE, warning = FALSE}
durham_tracts <- tracts(
  state = "NC", 
  county = "Durham", 
  year = 2019,
  class = "sf",
  progress_bar = FALSE
)
```

This object is an `sf` data object. The relevant variables are `GEOID`, which contains a unique identifier of each county and `geometry`, which contains the boundary information. For analyzing our data, we will first merge `dnc` with the `sf` data object. We begin by preparing the data for merging.

```{r}
durham_merged <- durham_tracts %>%
  mutate(GEOID = as.numeric(GEOID)) %>%
  left_join(dnc , by = "GEOID")
```

We can now visualize the adult diabetes proportion across the Durham county census tracts.

```{r}
#| echo: true
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 10
#| fig-height: 7
#| layout-ncol: 1
ggplot(durham_merged) +
  geom_sf(aes(fill = diabetes), color = "gray20") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(title = "Adult Diabetes Rate by Census Tract (Durham, 2019)",
       fill = "% with Diabetes") +
  scale_fill_viridis_c() + 
  theme_minimal()
```

Note that there are three locations that do not have any data, represented in gray. These locations correspond to census tracts with a zero residents. For the analysis we will remove them.

# Model Goals

Define $Y_i$ as the percentage of adults with diabetes in census tract $i$, for $i = 1,\ldots,n$. There are $n = 57$ census tract in Durham county with a non-zero number of residents. We are interested in producing a map of adult diabetes that has been smoothed using an ICAR process. We want to fit the following model:

\begin{align*}
Y_i &= \alpha + \mathbf{x}_i\boldsymbol{\beta} + \theta_i + \epsilon_i, \quad \epsilon_i \stackrel{iid}{\sim} N(0,\sigma^2)\\
\boldsymbol{\theta} &\sim \text{ICAR}(\tau^2)\\
\alpha^* &\sim N(0, 3^2)\\
\beta_j &\sim N(0,3^2)\quad j = 1,\ldots,p\\
\sigma &\sim \text{Half-Normal}(0, 3^2)\\
\tau &\sim \text{Half-Normal}(0, 3^2),
\end{align*} where $\mathbf{x}_i = (\text{education}_i,\text{income}_i,\text{color}_i)$ and $\alpha^*$ is the centered intercept.

## Computing the adjacency matrix

To fit the model, we required an adjacency matrix, $\mathbf{W}$. We only want to compute our adjacency matrix for the locations with non-zero residents. Thus, we create a dataset that removes census tracts with `NA` for diabetes.

```{r}
durham_model_data <- durham_merged %>%
  filter(!is.na(diabetes))
```

We then use functions for the R package `spdep` to create a neighbor list and adjacency matrix.

```{r}
nb <- poly2nb(durham_model_data)
W <- nb2mat(nb, style = "B", zero.policy = TRUE)
```

We can visualize the adjacency matrix. To do this we first get the centroids of each census tract.

```{r, warning = FALSE}
centroids <- st_centroid(durham_model_data)
centroids <- centroids %>% mutate(id = 1:nrow(centroids))
```

We then compute the edges and create a data frame with the indices of the neighboring census tracts.

```{r}
neighbor_pairs <- which(W == 1, arr.ind = TRUE)
edges <- data.frame(
  from = neighbor_pairs[, 1],
  to = neighbor_pairs[, 2]
)
```

This plot shows the adjacency structure among Durham County census tracts used in the spatial model. The function `geom_sf()` draws the outlines of the tracts and also plots red dots at each tract centroid to show where the adjacency links originate. The function `geom_segment()` draws blue lines between neighboring tracts, based on their centroids.

```{r, echo = FALSE}
#| echo: true
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 10
#| fig-height: 7
#| layout-ncol: 1
ggplot(data = durham_model_data) +
  geom_sf(fill = NA, color = "black") +
  geom_segment(data = edges,
               aes(x = st_coordinates(centroids)[from, 1], y = st_coordinates(centroids)[from, 2],
                   xend = st_coordinates(centroids)[to, 1], yend = st_coordinates(centroids)[to, 2]),
               color = "blue", size = 1.5) +
  geom_sf(data = centroids, aes(geometry = geometry), color = "red", size = 3) +
  theme_minimal() +
  coord_sf() +
  labs(x = "Longitude", y = "Latitude") +
  ggtitle("Census Tract Adjacency Map") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Finally, we can compute the needed objects for the ICAR prior.

```{r}
neighbor_pairs_lower <- neighbor_pairs[neighbor_pairs[, 1] < neighbor_pairs[, 2], ]
n_edges <- nrow(neighbor_pairs_lower)
node1 <- neighbor_pairs_lower[, 1]
node2 <- neighbor_pairs_lower[, 2]
```

## Fitting the Model

We can then compute the design matrix, making sure to remove the intercept.

```{r}
X <- model.matrix(~ education + income + color, data = durham_model_data)[, -1]
```

And then we can create the Stan data object.

```{r}
stan_data <- list(
  n = nrow(durham_model_data),
  p = ncol(X),
  n_edges = n_edges,
  node1 = node1,
  node2 = node2,
  Y = durham_model_data$diabetes,
  X = X
)
```

We will now fit the model and print the posterior summaries and MCMC convergence diagnostics.

```{r, eval = FALSE}
icar <- stan_model(file = "icar.stan")
fit_icar <- sampling(icar, stan_data, 
                     iter = 5000, control = list(adapt_delta = 0.99))
print(fit_icar, pars = c("alpha_star", "alpha", "beta", "sigma", "tau"))
```

```{r, echo = FALSE}
fit_icar <- readRDS(file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/course-material/data/DNC/fit-icar.rds")
print(fit_icar, pars = c("alpha_star", "alpha", "beta", "sigma", "tau"))
```

```{r, echo = FALSE, eval = FALSE}
icar <- stan_model(file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/repos/ae-08/icar.stan")
fit_icar <- sampling(icar, stan_data, iter = 5000, control = list(adapt_delta = 0.99))
saveRDS(fit_icar, file = "/Users/sib2/Box Sync/Faculty/Education/biostat725-sp25/course-material/data/DNC/fit-icar.rds")
```

Note that I increased `adapt_delta` from its default of 0.8 to help with the convergence. We will can also look at traceplots, which look good. The number of effective samples is quite small for the variance parameters, which is a bit concerning, however since the $\hat{R}$ and traceplots look good, we can proceed with inference.

```{r}
rstan::traceplot(fit_icar, pars = c("alpha_star", "alpha", "beta", "sigma", "tau"))
```

## Posterior Predictive Distribution

We will now look at the posterior predictive distributions, which we can use to map the diabetes proportion across Durham census tracts. We begin by extracting the posterior predictive distribution and then compute summaries.

```{r}
Y_pred <- rstan::extract(fit_icar, pars = "Y_pred")$Y_pred
ppd_mean <- apply(Y_pred, 2, mean)
ppd_sd <- apply(Y_pred, 2, sd)
```

We then merge the predictions back to the original dataset, with all census tracts, including those with the `NA` for diabetes, so that our maps are across all census tracts. We begin by creating a data object that contains our predictions that can then be merged into the full data.

```{r}
model_geoids <- durham_merged %>%
  filter(!is.na(diabetes)) %>%
  pull(GEOID)
predictions <- tibble(GEOID = model_geoids,
                      ppd_mean = ppd_mean,
                      ppd_sd = ppd_sd)

```

We now merge predictions back into the full spatial object for plotting.

```{r}
durham_plot_data <- durham_merged %>%
  left_join(predictions, by = "GEOID")
```

The code to create a map of the observed diabetes proportion and the posterior mean is below. Note that I make sure to have each plot be on the same color scale, so they are comparable. I first compute the maximum value needed for the upper bound and then use the `limits` functions.

```{r}
max_limit <- max(c(durham_merged$diabetes,
                   durham_plot_data$ppd_mean), na.rm = TRUE)
```

The maps can be created as follows.

```{r}
#| echo: true
#| message: false
#| warning: false
#| fig-align: "center"
#| fig-width: 10
#| fig-height: 7
#| layout-ncol: 2
ggplot(durham_plot_data) +
  geom_sf(aes(fill = diabetes), color = "gray20") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(title = "Adult Diabetes Rate by Census Tract (Durham, 2019)",
       fill = "% with Diabetes") +
  scale_fill_viridis_c(
    limits = c(0, max_limit),
    na.value = "lightgray"  # Gray out missing tracts
  ) + 
  theme_minimal()
ggplot(durham_plot_data) +
  geom_sf(aes(fill = ppd_mean), color = "black") +
  scale_fill_viridis_c(
    limits = c(0, max_limit),
    na.value = "lightgray"  # Gray out missing tracts
  ) +
  labs(
    title = "Predicted Diabetes Rate by Census Tract (ICAR Model)",
    fill = "Predicted %"
  ) +
  theme_minimal()
```

# Exercises

## Exercise 1

Examine the two side-by-side plots above and compare and contrast them. What changes to do you observe?

**Answer:**

```{r}
#| label: ex1

# add code here

```

## Exercise 2

Create a map of the posterior predictive standard deviation across the Durham census tracts. What patterns do you observe?

**Answer:**

```{r}
#| label: ex2

# add code here

```

## Exercise 3

Present posterior summaries of $\boldsymbol{\beta}$. Which predictors are associated with adult diabetes?

**Answer:**

```{r}
#| label: ex3

# add code here

```

::: callout-important
To submit the AE:

-   Render the document to produce the PDF with all of your work from today's class.
-   Push all your work to your AE repo on GitHub. You're done! 🎉
:::
